# print from 1 to N using recursion 

def recursion(i,N):
    if (i>N):
        return 
    print(i)
    recursion(i+1,N)

N=int(input())
recursion(1,N)

# print from 1 to N using backtracking

def recursion(i,N):
    if (i<1):
        return 
    recursion(i-1,N)
    print(i)

N=int(input())
recursion(N,N)

# print from N to 1 using recursion 

def recursion(i,N):
    if (i<1):
        return 
    print(i)
    recursion(i-1,N)

N=int(input())
recursion(N,N)

# print from N to 1 using backtracking

def recursion(i,N):
    if (i>N):
        return 
    recursion(i+1,N)
    print(i)

N=int(input())
recursion(1,N)


TC:O(N)
SC:O(N)


# sum of the numbers till n 
def recursion(i,sum_val):
    if(i<1):
        print(sum_val)
        return 
    recursion(i-1,sum_val+i)
i=int(input())
recursion(i,0)

# sum of the numbers till n (functional recursion)
def recursive_functional(n):
    if n==0:
        return 0
    return n+recursive_functional(n-1)
n=int(input())
print(recursive_functional(n))


#factorial of a given number
def recursive_functional(n):
    if(n==1):
        return 1
    return n*recursive_functional(n-1)
n=int(input())
print(recursive_functional(n))


# sum of fibonacci numbers
def fib(n):
    if (n<=1):
        return n
    return fib(n-1)+fib(n-2)
n=int(input())
print(fib(n)) 


# printing all subsequences using recursion

def subsequences(index_position,list_sub,list_a,length):
    if (index_position>=length):
        print(list_sub)
        return 
    list_sub.append(list_a[index_position])
    subsequences(index_position+1,list_sub,list_a,length)
    list_sub.pop()
    subsequences(index_position+1,list_sub,list_a,length)

list_a=list(map(int,input().split()))
length=len(list_a)
list_sub=[]
index_position=0
subsequences(index_position,list_sub,list_a,length)



