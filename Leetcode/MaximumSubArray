#MaximumSubArray
#code

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maximum_subarray=nums[0]
        current_sum=0

        for i in nums:
            if current_sum<0:
                current_sum=0
            current_sum+=i
            maximum_subarray=max(current_sum,maximum_subarray)
        return maximum_subarray

#TimeComplexity: O(N)

Input:-2 1 -3 4 -1 2 1 -5 4
output: 6

def maxSubArray(N):
    maxSub=N[0]
    curSum=0
    for i in N:
        if curSum<0:
            curSum=0
        curSum+=i
        maxSub=max(maxSub,curSum)
    return maxSub

N=list(map(int,input().split()))
print(maxSubArray(N))


if the given list is [2,-4,5-1,2,-3] then all possible contiguous sub arrays
[2]
[2,-4]
[2,-4,5]
[2,-4,5,-1]
[2,-4,5,-1,2,-3]
[-4]
[-4,5]
[-4,5,-1]
[-4,5,-1,2]
[-4,5,-1,2,-3]
[5]
[5,-1]
[5,-1,2]
[5,-1,2,-3]
[-1]
[-1,2]
[-1,2,-3]
[2]
[2,-3]
[-3]

Above the contigous sub-lists,the contiguos sub-List is [5,-1,2] has a largest sum which is 6. 
so the output would be 5 -1 6


#code

a = list(map(int, input().split()))
sum_dict = {}
for i in range(len(a)):
    for j in range(i+1, len(a)+1):
        sum_dict[tuple(a[i:j])] = sum(a[i:j])
keys = list(sum_dict.keys()) 
values = list(sum_dict.values())
max_sum_index = values.index(max(values))  
print(*keys[max_sum_index]) 

#TC= O(N^2)

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        





